#!/usr/bin/env ruby

if (%w( -h --help -help help ) & ARGV).length > 0
  puts "usage: djsd [-hv]"
  puts "starts dotjs server in the foreground. kill with ^C"
  exit
end

if ARGV.include?('-v')
  puts "djsd 1.6"
  exit
end

require 'webrick'
require 'thread'

SITE_CMD_QUEUE = {}
DOT_JS_FILES_DIR = '~/.js'

dotjs = Class.new(WEBrick::HTTPServlet::AbstractServlet) do
  def do_GET(request, response)
    if request.query.has_key?("poll")
      body = fetch_queue(request.path)
    else
      body = build_body(request.path)
    end

    response.status = body.empty? ? 204 : 200
    if origin = detect_origin(request)
      response['Access-Control-Allow-Origin'] = origin
    end
    response['Content-Type'] = 'text/javascript'
    response.body = body
  end

  def do_POST(request, response)
    site = request.path.gsub('/', '')
    if SITE_CMD_QUEUE[site].nil?
      SITE_CMD_QUEUE[site] = Queue.new
    end
    body = request.body.slice(request.body.index('cmd=') + 'cmd='.length,
                              request.body.length)
    SITE_CMD_QUEUE[site].push(body)
    response.status = 204
  end

  def build_body(path)
    files = [File.expand_path("default.js", DOT_JS_FILES_DIR)]
    paths = path.gsub('/','').split('.')

    until paths.empty?
      file = File.expand_path(paths.join('.'), DOT_JS_FILES_DIR)
      files << file if File.file?(file)
      paths.shift
    end

    body = "// dotjs is working! //\n"

    files.each do |file|
      body << File.read(file) + "\n" if File.file?(file)
    end

    body
  end

  def detect_origin(req)
    path   = req.path
    origin = req.header['origin']
    search = path.gsub('/','').gsub(/\.js$/,'') + '$'

    if origin.length == 1 && path.length != 1 && origin[0].match(search)
      origin[0]
    end
  end

  def fetch_queue(path)
    site = path.gsub('/', '')
    if SITE_CMD_QUEUE[site].nil?
      SITE_CMD_QUEUE[site] = Queue.new
    end
    body = SITE_CMD_QUEUE[site].pop if not SITE_CMD_QUEUE[site].empty?
    body = "" if body.nil?

    body
  end
end

server = WEBrick::HTTPServer.new(:Port => 3131, :AccessLog => [])
server.mount('/', dotjs)

%w( INT TERM ).each do |sig|
  trap(sig) { server.shutdown }
end

server.start
